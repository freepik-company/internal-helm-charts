# Default values for cogvlm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: your-docker-repo/image-name
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

args: []

config:
  modelLocalDir: "/var/huggingface/cache"
  modelMountDir: "/root/.cache/huggingface"

runtimeClassName: nvidia

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations: {}
  #type: ClusterIP
  #port: 5000
  type: NodePort
  targetPort: 5000
  port: 5000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# TODO: Autoscaling by gpu
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

apiGateway:
  enabled: false
  parentRefs:
    name: stable-gateway
    namespace: gateway-ns
  annotations: {}
  #  kubernetes.io/key1: value1
  #  kubernetes.io/key2: value2
  hostnames: {}
  #  - chart-example.local
  #  - k8s.local

routes: {}
  # cogAiExtraRule:
  #   hostnames: {}
  #    - chart-example.local
  #    - k8s.local
  #   rules:
  #    - matchesExtra: # Due to implementation constraint only 8 match per rule are allowed
  #        - path:
  #            type: PathPrefix
  #            value: /
  #          headers:
  #            - type: Exact # Exact, RegularExpression
  #              name: gw
  #              value: true
  #        - path:
  # cogAiSimpleRule:
  #   rules:
  #     - matches:
  #         - /url1/
  #         - /url2/


# Default livenessProbe and readinessProbe
livenessProbe:
  exec:
    command:
      - /usr/bin/sh
      - -c
      - /usr/bin/test -f /var/run/cog/ready
  failureThreshold: 10
  periodSeconds: 100
  successThreshold: 1
  timeoutSeconds: 1

readinessProbe:
  exec:
    command:
      - /usr/bin/sh
      - -c
      - /usr/bin/test -f /var/run/cog/ready
  failureThreshold: 10
  periodSeconds: 100
  successThreshold: 1
  timeoutSeconds: 1

envs: {}
envsFrom: {}

strategy: {}

# Sealed values for secrets. It uses SealedSecrets to store secrets in a secure way.
# Ensure you have SealedSecrets installed in your cluster before enabling this feature
# and that you keep a sealed value to be sure that an upload to a repository is safe.
sealedSecretsAnnotations:
  sealedsecrets.bitnami.com/cluster-wide: "true"
sealedSecrets: []
  #- name: MY_SECRET
  #  value: "my-encrypted-secret-value"

volumes: []
  # - name: my-volume
  #   emptyDir: {}

volumeMounts: []
  # - name: my-volume
  #   mountPath: /path/to/mount


# Nginx sidecar for auth-token management

# Sidecar container to enable authorization token. Used to authenticate request using header 
# - Authorization: Bearer XXXXXX
# Disabled by default.
# It creates a service in port TCP 80 to retrieve request and authorize it to proxy that request to COG later.
sidecar:
  enabled: false

  name: nginx-auth-sidecar

  # It must be a valid nginx image with support for template rendering
  image:
    repository: "nginx"
    pullPolicy: IfNotPresent
    tag: "1.26.0"

  sealedSecrets:
    # Sealed secret disabled by default
    # To enable it set enabled to true, optionally set a name and set a sealed secret token form SealedSecret
    # (https://github.com/bitnami-labs/sealed-secrets)

    # If you don't want to use sealed secret, you can use a secret with the token installed by hand o by 
    # other means and configure a secret name with environment variable TOKEN
    enabled: false
    name: "" # Name of the sealed secret (optional)
    token: "" # Already sealed secret token

  env: []

  annotations: 
    sealedsecrets.bitnami.com/cluster-wide: "true"

  securityContext: {}

  resources: {}

  livenessProbe: 
    httpGet:
      path: /healthz
      port: 80
    initialDelaySeconds: 15
    periodSeconds: 20

  readinessProbe:
    httpGet:
      path: /healthz
      port: 80
    initialDelaySeconds: 15
    periodSeconds: 20

  ports:
    - name: http
      containerPort: 80
      protocol: TCP

  service:
    type: ClusterIP
    port: 80
    targetPort: 80

  defaultConfTemplate: |
    server {
      listen 80;

      location / {
          if ($http_authorization != 'Bearer ${TOKEN}') {
              return 403;
          }

          proxy_pass http://127.0.0.1:{{ .Values.service.targetPort }};
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      }
    }